name: Automated Release Workflow

on:
  push:
    branches:
      - '*-release'

permissions:
  contents: write

jobs:
  prepare-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Install jq and moreutils
        run: sudo apt-get update && sudo apt-get install -y jq moreutils

      - name: Update module.json with version
        run: |
          VERSION=${GITHUB_REF#refs/heads/}
          VERSION=${VERSION%-release}
          jq ".version = \"$VERSION\"" module.json | sponge module.json
          jq ".manifest = \"https://github.com/${GITHUB_REPOSITORY}/releases/download/$VERSION/module.json\"" module.json | sponge module.json
          jq ".download = \"https://github.com/${GITHUB_REPOSITORY}/releases/download/$VERSION/module.zip\"" module.json | sponge module.json

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add module.json
          git commit -m "Update manifest and download links in module.json"
          git push
          
      - name: Define Version and Tag
        run: |
          echo "VERSION=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "TAG_NAME=${GITHUB_REF#refs/heads/}" | sed 's/-release$//' >> $GITHUB_ENV
        id: version_tag

      - name: Create Tag and Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload module.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./module.json
          asset_name: module.json
          asset_content_type: application/json

      - name: Zip Repository Contents
        run: zip -r -X module.zip . -x "*.github/*" -x "*.git/*"

      - name: Upload module.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./module.zip
          asset_name: module.zip
          asset_content_type: application/zip
